dU <- max(dose)
# density of the dose
dose_grid <- seq(dL, dU, length.out=100)
frq_weights_plot <- ggplot(data.frame(dose=dose[dose>0]), aes(x=dose)) +
geom_density(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid)))+
ylab("Density weights") +
xlab("Dose") +
ylim(c(0,3)) +
labs(title="Density of dose")
frq_weights_plot
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D=dose)
plot_df <- cbind.data.frame(twfe_weights, dose_grid)
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
ylim(c(0,3)) +
labs(title="TWFE weights")
twfe_weights_plot
analysis_sample1 <- analysis_sample[analysis_sample$EXPOSURE_4YR <=4, ]
# plotting histogram
dose <- as.vector(analysis_sample1$EXPOSURE_4YR)
dy <- as.vector(analysis_sample1$k_rank)
p <- ggplot(data.frame(dose=dose), aes(x=dose)) +
geom_histogram()
p
# The histogram show that a non-trivial fraction of units are untreated whist there is no real
# pattern to the rest, bar the bunching at 4 years.
# binscatter plot of the change in the outcome over time with respect to the dose
binnedout <- binscatter(data=analysis_sample1, x="EXPOSURE_4YR", y="k_rank")
binnedout
twfe <- lm(dy ~ dose)
summary(twfe)$coefficients
cont_res <- cont_did(dy, dose)
cont_res$att.overall
cont_res$acrt.overall
plot_df <- cont_res$local_effects
colnames(plot_df) <- c("dose", "att", "acrt")
ggplot(plot_df, aes(x=dose, att)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
ggplot(plot_df, aes(x=dose, acrt)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
dL <- min(dose[dose>0])
dU <- max(dose)
# density of the dose
dose_grid <- seq(dL, dU, length.out=100)
frq_weights_plot <- ggplot(data.frame(dose=dose[dose>0]), aes(x=dose)) +
geom_density(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid)))+
ylab("Density weights") +
xlab("Dose") +
ylim(c(0,3)) +
labs(title="Density of dose")
frq_weights_plot
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D=dose)
plot_df <- cbind.data.frame(twfe_weights, dose_grid)
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
ylim(c(0,3)) +
labs(title="TWFE weights")
twfe_weights_plot
lag
analysis_sample <- analysis_sample %>%
arrange(AY_FALL)
analysis_sample %>%
group_by(UNITID) %>% # Assuming 'id' is a grouping variable you might have. If not, adjust accordingly.
mutate(d_k_rank = k_rank - lag(k_rank, n=2)) %>%
ungroup() # Remove the grouping
analysis_sample %>%
group_by(UNITID) %>% # Assuming 'id' is a grouping variable you might have. If not, adjust accordingly.
mutate(d_k_rank = k_rank - lag(k_rank, n=2)) %>%
ungroup() %>% select(k_rank, AY_FALL, d_k_rank)
### k_rank_diff calc
analysis_sample <- analysis_sample %>%
arrange(AY_FALL)
analysis_sample %>%
group_by(UNITID, AY_FALL) %>% # Assuming 'id' is a grouping variable you might have. If not, adjust accordingly.
mutate(d_k_rank = k_rank - lag(k_rank, n=2)) %>%
ungroup() %>% select(k_rank, AY_FALL, d_k_rank)
analysis_sample %>%
group_by(UNITID, AY_FALL) %>% # Assuming 'id' is a grouping variable you might have. If not, adjust accordingly.
mutate(d_k_rank = k_rank - lag(k_rank)) %>%
ungroup() %>% select(k_rank, AY_FALL, d_k_rank
0
analysis_sample %>%
group_by(UNITID, AY_FALL) %>% # Assuming 'id' is a grouping variable you might have. If not, adjust accordingly.
mutate(d_k_rank = k_rank - lag(k_rank)) %>%
ungroup() %>% select(k_rank, AY_FALL, d_k_rank)
### k_rank_diff calc
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = k_rank - lag(k_rank, 2)) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
### k_rank_diff calc
analysis_sample <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = if(AY_FALL > min(AY_FALL)) k_rank - lag(k_rank, 2) else NA) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
### k_rank_diff calc
analysis_sample <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = k_rank - dplyr::lag(k_rank, 2, default = NA)) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = k_rank - dplyr::lag(k_rank, 2, default = NA)) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
rm(list=ls())
pacman::p_load(dplyr, haven, magrittr, tidyverse, fixest, did, broom, fastDummies, sandwich, lmtest)
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1 #& late_adopter == 0
) %>%  filter(AY_FALL <=2005)
analysis_sample$k_rank <- analysis_sample$k_rank * 100
#excluding a specific observation
analysis_sample <- filter(analysis_sample, UNITID != 184694)
# create + recode simplebarrons variable
analysis_sample$simplebarrons <- analysis_sample$barrons
analysis_sample$simplebarrons <- as.numeric(as.character(analysis_sample$simplebarrons))
analysis_sample$simplebarrons <- dplyr::recode(analysis_sample$simplebarrons,
`0` = 1, `1` = 1,
`2` = 2, `3` = 2,
`4` = 3,
`5` = 4,
`999` = 9)
# group data and generate identifiers
analysis_sample$simpletiershock <- as.integer(interaction(analysis_sample$simplebarrons, analysis_sample$AY_FALL, drop = TRUE))
analysis_sample <- fastDummies::dummy_cols(analysis_sample, select_columns = "simpletiershock")
analysis_sample$D <- ifelse(analysis_sample$EXPOSURE_4YR > 0, 1, 0)
#identical_elements <- analysis_sample$D == analysis_sample$EXPOSED
#identical_elements # basically same thing - few differences probably bc of samples (main / twfe?)
analysis_sample <- analysis_sample %>% mutate(t = case_when(
AY_FALL == 1998 ~ 1,
AY_FALL == 1999 ~ 2,
AY_FALL == 2000 ~ 3,
AY_FALL == 2001 ~ 4,
AY_FALL == 2002 ~ 5,
AY_FALL == 2003 ~ 6,
AY_FALL == 2004 ~ 7,
AY_FALL == 2005 ~ 8
))
analysis_sample$G <- 0
for (i in unique(analysis_sample$UNITID)){
analysis_sample$G[analysis_sample$UNITID == i] <- min(analysis_sample$t[analysis_sample$UNITID == i & analysis_sample$D == 1])
}
analysis_sample$R <- analysis_sample$t - analysis_sample$G + 1
analysis_sample <- dummy_cols(analysis_sample, select_columns = "R")
R <- grep("R_", names(analysis_sample)[300:374], value = T)
# Whats trending in diff-n-diff paper introduces these two estimators under the multiple
# treatment periods and differntial treatment times.
# The Static TWFE assumes there is no hetergeneity in treatment effects over time or across
# different units
# Dynamic TWFE assumes there is treatment heterogeneity over time (so different treatment effect
# if you got the treatment sooner rather than later) but no heterogeneity across units.
# static TWFE
M1 <- feols(k_rank ~ D | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M1)
# dynamic TWFE
M2 <- feols(k_rank ~ `R_-1` + `R_-2` + `R_1` + `R_2` + `R_3` + `R_4` + `R_5` +
`R_6` | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M2)
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y")
# To extract the year and create a new column for it
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, "%Y")
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = k_rank - dplyr::lag(k_rank, 2, default = NA)) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
## k_rank_diff calc
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = if(n() >= 3) k_rank - dplyr::lag(k_rank, 2, default = 0) else NA) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
## k_rank_diff calc
one <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(k_rank_2yr_change = if(n() >= 3) k_rank - dplyr::lag(k_rank, 2, default = 0) else NA) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
View(one)
## k_rank_diff calc
one <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID, AY_FALL) %>%
mutate(k_rank_2yr_change = if(n() >= 3) k_rank - dplyr::lag(k_rank, 2, default = 0) else NA) %>%
ungroup() %>%
select(AY_FALL, k_rank, k_rank_2yr_change)
View(one)
## k_rank_diff calc
analysis_sample <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[EXPOSED == 1] - k_rank[EXPOSED == 0]) %>%
ungroup()
rm(list=ls())
pacman::p_load(dplyr, haven, magrittr, tidyverse, fixest, did, broom, fastDummies, sandwich, lmtest)
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1 #& late_adopter == 0
) %>%  filter(AY_FALL <=2005)
analysis_sample$k_rank <- analysis_sample$k_rank * 100
#excluding a specific observation
analysis_sample <- filter(analysis_sample, UNITID != 184694)
# create + recode simplebarrons variable
analysis_sample$simplebarrons <- analysis_sample$barrons
analysis_sample$simplebarrons <- as.numeric(as.character(analysis_sample$simplebarrons))
analysis_sample$simplebarrons <- dplyr::recode(analysis_sample$simplebarrons,
`0` = 1, `1` = 1,
`2` = 2, `3` = 2,
`4` = 3,
`5` = 4,
`999` = 9)
# group data and generate identifiers
analysis_sample$simpletiershock <- as.integer(interaction(analysis_sample$simplebarrons, analysis_sample$AY_FALL, drop = TRUE))
analysis_sample <- fastDummies::dummy_cols(analysis_sample, select_columns = "simpletiershock")
analysis_sample$D <- ifelse(analysis_sample$EXPOSURE_4YR > 0, 1, 0)
#identical_elements <- analysis_sample$D == analysis_sample$EXPOSED
#identical_elements # basically same thing - few differences probably bc of samples (main / twfe?)
analysis_sample <- analysis_sample %>% mutate(t = case_when(
AY_FALL == 1998 ~ 1,
AY_FALL == 1999 ~ 2,
AY_FALL == 2000 ~ 3,
AY_FALL == 2001 ~ 4,
AY_FALL == 2002 ~ 5,
AY_FALL == 2003 ~ 6,
AY_FALL == 2004 ~ 7,
AY_FALL == 2005 ~ 8
))
analysis_sample$G <- 0
for (i in unique(analysis_sample$UNITID)){
analysis_sample$G[analysis_sample$UNITID == i] <- min(analysis_sample$t[analysis_sample$UNITID == i & analysis_sample$D == 1])
}
analysis_sample$R <- analysis_sample$t - analysis_sample$G + 1
analysis_sample <- dummy_cols(analysis_sample, select_columns = "R")
R <- grep("R_", names(analysis_sample)[300:374], value = T)
# Whats trending in diff-n-diff paper introduces these two estimators under the multiple
# treatment periods and differntial treatment times.
# The Static TWFE assumes there is no hetergeneity in treatment effects over time or across
# different units
# Dynamic TWFE assumes there is treatment heterogeneity over time (so different treatment effect
# if you got the treatment sooner rather than later) but no heterogeneity across units.
# static TWFE
M1 <- feols(k_rank ~ D | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M1)
# dynamic TWFE
M2 <- feols(k_rank ~ `R_-1` + `R_-2` + `R_1` + `R_2` + `R_3` + `R_4` + `R_5` +
`R_6` | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M2)
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y")
# To extract the year and create a new column for it
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, "%Y")
## k_rank_diff calc
analysis_sample <- analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[EXPOSED == 1] - k_rank[EXPOSED == 0]) %>%
ungroup()
k_rank[EXPOSED == 1] - k_rank[EXPOSED == 0]
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[EXPOSED == 1] - k_rank[EXPOSED == 0])
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[EXPOSED == 1] - k_rank[EXPOSED == 0])
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == 1999] - k_rank[AY_FALL == 2001]) %>%
ungroup()
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"]
)
## k_rank_diff calc
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"]) %>%
ungroup()
analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID)
## k_rank_diff calc
one = analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"]) %>%
ungroup()
one = analysis_sample %>%
arrange(AY_FALL) %>%
group_by(UNITID)
View(one)
one = analysis_sample %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"])
## k_rank_diff calc
one = analysis_sample %>% filter(year_treated == 1999) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"]) %>%
ungroup()
## k_rank_diff calc
one = analysis_sample %>% group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"]) %>%
ungroup()
analysis_sample %>% group_by(UNITID)
one = analysis_sample %>% group_by(UNITID) %>%
mutate(d_k_rank = k_rank[AY_FALL == "1999"] - k_rank[AY_FALL == "2001"]) %>%
ungroup()
## k_rank_diff calc
one <- analysis_sample %>%
group_by(UNITID) %>%
mutate(d_k_rank = if_else(AY_FALL == "1999",
k_rank - k_rank[AY_FALL == "2001"][1],
NA_real_)) %>%
ungroup() %>%
filter(AY_FALL == "1999")
View(one)
one <- analysis_sample[analysis_sample$EXPOSURE_4YR <=4, ]
## k_rank_diff calc ----------------------------------------------------------
one <- analysis_sample %>%
group_by(UNITID) %>%
mutate(d_k_rank = if_else(AY_FALL == "1999",
k_rank - k_rank[AY_FALL == "2001"][1],
NA_real_)) %>%
ungroup() %>%
filter(AY_FALL == "1999")
# plotting histogram
dose <- as.vector(one$EXPOSURE_4YR)
dy <- as.vector(one$k_rank)
p <- ggplot(data.frame(dose=dose), aes(x=dose)) +
geom_histogram()
p
# The histogram show that a non-trivial fraction of units are untreated whist there is no real
# pattern to the rest, bar the bunching at 4 years.
# binscatter plot of the change in the outcome over time with respect to the dose
binnedout <- binscatter(data=one, x="EXPOSURE_4YR", y="k_rank")
binnedout
twfe <- lm(dy ~ dose)
## k_rank_diff calc ----------------------------------------------------------
one <- analysis_sample %>%
group_by(UNITID) %>%
mutate(d_k_rank = if_else(AY_FALL == "1999",
k_rank - k_rank[AY_FALL == "2001"][1],
NA_real_)) %>%
ungroup() %>%
filter(AY_FALL == "2000")
# plotting histogram
dose <- as.vector(one$EXPOSURE_4YR)
dy <- as.vector(one$k_rank)
p <- ggplot(data.frame(dose=dose), aes(x=dose)) +
geom_histogram()
p
# The histogram show that a non-trivial fraction of units are untreated whist there is no real
# pattern to the rest, bar the bunching at 4 years.
# binscatter plot of the change in the outcome over time with respect to the dose
binnedout <- binscatter(data=one, x="EXPOSURE_4YR", y="k_rank")
binnedout
twfe <- lm(dy ~ dose)
summary(twfe)$coefficients
cont_res <- cont_did(dy, dose)
#' @param l a particular value of the treatment for which to compute weights
#' @param D an nx1 vector containing doses for all units
cont_twfe_weights <- function(l, D) {
wt <- ( ( mean(D[D>=l]) - mean(D) ) * mean(1*(D>=l)) ) / var(D)
wt
}
#' nonparametric estimates of att(d|d) and acrt(d|d)
#' @param dy the change in the outcome over time
#' @param dose the amount of the treatment
#' @return list(
#'            local_effects - data frame containing the dose and estimates of
#'              att(dose) and acrt(dose)
#'            att.overall - an estimate of the overall att
#'            acrt.overall - an estimate of the overall acrt
#'          )
cont_did <- function(dy, dose) {
# choose bandwidth
bw <- np::npregbw(formula=dy ~ dose,
regtype="ll",
bws=1.06,
bwscaling=TRUE,
bandwidth.compute=FALSE)
# estimate att and acrt nonparametrically
out <- np::npreg(bws=bw, gradients=TRUE, exdat=dose)
# order from smallest to largest dose and drop untreated
this_order <- order(dose)
dose <- dose[this_order]
dy <- dy[this_order]
att.d <- out$mean[this_order]
acrt.d <- out$grad[,1][this_order]
att.d <- att.d[dose>0]
acrt.d <- acrt.d[dose>0]
att.overall <- mean(att.d)
acrt.overall <- mean(acrt.d)
return(list(local_effects=data.frame(dose=dose[dose>0],
att.d=att.d,
acrt.d=acrt.d),
att.overall=att.overall,
acrt.overall=acrt.overall))
}
binnedout
twfe <- lm(dy ~ dose)
summary(twfe)$coefficients
cont_res <- cont_did(dy, dose)
cont_res$att.overall
cont_res$acrt.overall
plot_df <- cont_res$local_effects
colnames(plot_df) <- c("dose", "att", "acrt")
ggplot(plot_df, aes(x=dose, att)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
ggplot(plot_df, aes(x=dose, acrt)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
dL <- min(dose[dose>0])
dU <- max(dose)
# density of the dose
dose_grid <- seq(dL, dU, length.out=100)
frq_weights_plot <- ggplot(data.frame(dose=dose[dose>0]), aes(x=dose)) +
geom_density(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid)))+
ylab("Density weights") +
xlab("Dose") +
ylim(c(0,3)) +
labs(title="Density of dose")
frq_weights_plot
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D=dose)
plot_df <- cbind.data.frame(twfe_weights, dose_grid)
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
ylim(c(0,3)) +
labs(title="TWFE weights")
twfe_weights_plot
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted")
twfe_weights_plot
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
labs(title="TWFE weights")
twfe_weights_plot
