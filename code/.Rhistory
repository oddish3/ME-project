DGP = function(seed, n,p,sigma ){
set.seed(seed)
sigma2 = sigma^2
n1 = p * n
n0 = n-n1
# Create the binary variable: fix the number of observations:
# n1 = p*n and n0 = n-n1
D = c(rep(0,n0), rep(1,n1))
# Generate the error terms as a function of D
eps = c()
for(i in 1:n){
if(D[i]==1){
eps[i] = rnorm(1,0,1)
}
else{eps[i] = rnorm(1,0,sigma)}
}
# Generate the outcome equation
y = 0 + 0*D+ eps
return(data.frame(cbind(y,D)))
}
# a) Generate a Test Dataset:
DGP1 = DGP(seed = 1,n = 30,p = 0.1, sigma = 0.5)
reg1 = lm(y ~ D,data = DGP1)
library(lmtest)
library(sandwich)
# robust:
coeftest(reg1, vcov = vcovHC(reg1, "HC1"))
# conventional
coeftest(reg1)
library(lmtest)
library(sandwich)
# robust:
coeftest(reg1, vcov = vcovHC(reg1, "HC1"))
# conventional
coeftest(reg1)
warnings()
install.packages("stringi")
install.packages("stringi")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(c("DBI", "quantmod", "RcppArmadillo", "segmented"))
install.packages("tidymodels")
rm(list=ls())
set.seed(1234)
########################
# Q1                   #
########################
# a)
library(wooldridge)
# Description of the data
?wage2
dat = wage2
View(dat)
# Getting the names
names(dat)
# Dimension of the data
dim(dat)
OLS = lm(lwage ~ educ , data = dat)
summary(OLS)
# e)
library(ivreg)
regiv = ivreg(lwage ~ educ |sibs , data = dat)
summary(regiv)
# d)
FirstStage = lm(educ ~ sibs, data = dat)
summary(FirstStage)
# e)
library(ivreg)
regiv = ivreg(lwage ~ educ |sibs , data = dat)
summary(regiv)
# a)
reg = lm(lwage ~ sibs, data = dat)
summary(reg)
# b)
reg2 = lm(educ ~ brthord, data = dat)
summary(reg2)
reg$coefficients[2]*3
#c)
library(ivreg)
regiv = ivreg(lwage ~ educ |brthord , data = dat)
summary(regiv)
# d)
firststage=lm(educ ~ sibs + brthord , data = dat)
summary(firststage)
summary(regiv)
# d)
firststage=lm(educ ~ sibs + brthord , data = dat)
summary(firststage)
########## Problem Set 5 ########
# clear the environment
rm(list=ls())
set.seed(1234)
# Q2:
library(frontier)
data(riceProdPhil)
dat = riceProdPhil
########## Problem Set 5 ########
# clear the environment
rm(list=ls())
set.seed(1234)
# Q2:
library(frontier)
# Q2:
library(frontier)
# Q2:
library(frontier)
data(riceProdPhil)
dat = riceProdPhil
# Create logs:
dat$LPROD = log(dat$PROD)
dat$LArea =log(dat$AREA)
dat$LLabor = log(dat$LABOR)
dat$LNPK = log(dat$NPK)
# Estimate the regression
PooledOLS = lm(LPROD ~ LArea + LLabor + LNPK, data = dat)
summary(PooledOLS)
# Q4 )
View(dat)
# Reshape the data to the long format
#each farmer for each year, then want each
datPanel = pdata.frame(dat, c("FMERCODE","YEARDUM") )
library(plm)
# Reshape the data to the long format
#each farmer for each year, then want each
datPanel = pdata.frame(dat, c("FMERCODE","YEARDUM") )
View(datPanel)
# Q4 )
view(dat)
# Q4 )
view(dat)
########## Problem Set 5 ########
# clear the environment
rm(list=ls())
set.seed(1234)
# Q2:
library(frontier)
data(riceProdPhil)
dat = riceProdPhil
# Create logs:
dat$LPROD = log(dat$PROD)
dat$LArea =log(dat$AREA)
dat$LLabor = log(dat$LABOR)
dat$LNPK = log(dat$NPK)
# Estimate the regression
PooledOLS = lm(LPROD ~ LArea + LLabor + LNPK, data = dat)
summary(PooledOLS)
# Q4 )
view(dat)
# Q4 )
View(dat)
library(plm)
# Reshape the data to the long format
#each farmer for each year, then want each
datPanel = pdata.frame(dat, c("FMERCODE","YEARDUM") )
View(datPanel)
FE1 = plm(LPROD ~ LArea + LLabor + LNPK, model = "within",data = datPanel,index=c("FMERCODE","YEARDUM"))
summary(FE1)
# Extract FE:
fixef(FE1)
setwd("~/Documents/R_folder/MSc/ME/ME-project/code")
# Data
setwd("~/Documents/R_folder/MSc/ME/ME-project/code")
# load dataset + filter
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1)
rm(list = ls())
# Packages
library(dplyr)
library(haven)
library(magrittr)
library(tidyverse)
library(fixest)
library(did)
library(dplyr)
library(broom)
library(fastDummies)
# Data
setwd("~/Documents/R_folder/MSc/ME/ME-project/code")
# load dataset + filter
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1)
#modify k rank variable
analysis_sample$k_rank <- analysis_sample$k_rank * 100
# 'panel data setup'
analysis_sample <- analysis_sample %>% group_by(UNITID, AY_FALL)
rm(list = ls())
# Packages
library(dplyr)
library(haven)
library(magrittr)
library(tidyverse)
library(fixest)
library(did)
library(dplyr)
library(broom)
library(fastDummies)
# load dataset + filter
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1)
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.prelim-DiD.R", echo=TRUE)
source("~/Documents/R_folder/MSc/ME/ME-project/code/2-staggered.R")
head <- analysis_sample %>% select(all_of(Y), all_of(T), all_of(D), all_of(G))
head(head)
# ==============================================================================
# Social Media and Labour market Outcomes
# ==============================================================================
#
# Author: 10710007 &  &
# Version: 13-03-2024
#
# ==============================================================================
rm(list = ls())
# Packages
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
pacman::p_load(dplyr, haven, magrittr, tidyverse, fixest, did, broom, fastDummies, sandwich, lmtest)
# DID_MULTIPLEGT FUNCTION
# Ensure remotes is available for GitHub installations
pacman::p_load(remotes)
# Install DIDmultiplegt from GitHub if not already installed
if (!"DIDmultiplegt" %in% rownames(installed.packages())) {
remotes::install_github("shuo-zhang-ucsb/did_multiplegt")
}
# Load DIDmultiplegt
pacman::p_load(DIDmultiplegt)
# Data
# load dataset + filter
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1)
# Script
# ==============================================================================
# create_exhbits_do (creating macro) ----
eqopp_demos <- c("k_married", "par_q1", "par_q2", "par_q3", "par_q4", "par_d9",
"par_top10pc", "par_top5pc", "par_top1pc", "par_toppt1pc", "par_rank")
ipeds_demos <- c("female", "hispanic", "asian", "black", "nativeamerican", "alien", "unknown",
"satmt25", "satmt75", "mi_sat", "use_act_score", "admssn_rate", "mi_admission_rate")
major_controls <- grep("^major_", names(analysis_sample), value = TRUE)
major_controls <- c(major_controls, "gradrate_150p")
### TWOWAYFE.do ----
#modify k rank variable
analysis_sample$k_rank <- analysis_sample$k_rank * 100
analysis_sample$cohort
min(analysis_sample$cohort)
max(analysis_sample$cohort)
min(analysis_sample$cohort)[exposure==1]
min(analysis_sample$cohort)[analysis_sample$exposure==1]
min(analysis_sample$cohort)[[analysis_sample$exposure==1]]
analysis_sample$exposure==1
min(analysis_sample$cohort)[[analysis_sample$EXPOSED==1]]
min(analysis_sample$cohort)[[analysis_sample$EXPOSED=1]]
min(analysis_sample$cohort[analysis_sample$EXPOSED == 1])
max(analysis_sample$cohort[analysis_sample$EXPOSED == 1])
min(analysis_sample$AY_FALL[analysis_sample$EXPOSED == 1])
max(analysis_sample$AY_FALL[analysis_sample$EXPOSED == 1])
min(analysis_sample$cohort)
max(analysis_sample$cohort)
min(analysis_sample$cohort[analysis_sample$EXPOSED == 1])
max(analysis_sample$cohort[analysis_sample$EXPOSED == 1])
min(analysis_sample$AY_FALL)
max(analysis_sample$AY_FALL)
min(analysis_sample$AY_FALL[analysis_sample$EXPOSED == 1])
max(analysis_sample$AY_FALL[analysis_sample$EXPOSED == 1])
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.5-plot.R")
df <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta")
# Assuming 'df' is your DataFrame after loading the data
# Keep the necessary columns
df <- df %>% select(simpletier, DateJoinedFB, FBName, super_opeid, barrons, UNITID)
# Handle duplicates and convert the date format
df <- df %>% distinct() %>% mutate(date = mdy(DateJoinedFB))
rm(list=ls())
df <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta")
# Assuming 'df' is your DataFrame after loading the data
# Keep the necessary columns
df <- df %>% select(simpletier, DateJoinedFB, FBName, super_opeid, barrons, UNITID)
# Handle duplicates and convert the date format
df <- df %>% distinct() %>% mutate(date = mdy(DateJoinedFB))
# Create a sequence of dates
date_seq <- seq(from = min(df$date, na.rm = TRUE), to = max(df$date, na.rm = TRUE), by = "day")
# Initialize a list to store data frames for each tier
tier_data <- list()
# Loop over each tier to calculate fraction of schools with FB access
tiers <- unique(df$barrons)
for(t in tiers) {
# For each date, calculate the fraction of schools that have joined FB
tier_df <- data.frame(date = date_seq)
tier_df$fb_access <- sapply(tier_df$date, function(d) {
mean(df$date <= d & df$barrons == t, na.rm = TRUE)
})
tier_df$tier = t
tier_data[[as.character(t)]] <- tier_df
}
# Combine all tiers into one data frame
combined_df <- bind_rows(tier_data)
# Plotting
ggplot(combined_df, aes(x = date, y = fb_access, color = factor(tier))) +
geom_line() +
labs(title = "Facebook Rollout Across School Tiers",
x = "Date",
y = "Fraction of Schools with FB Access",
color = "Tier") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "green", "yellow", "purple", "orange")) # Customize as needed
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.5-plot.R")
setwd("~/Documents/R_folder/MSc/ME/ME-project/original_study/labour-market")
# Import data
cohort_graphdata <- read_csv("data/output/cohort_graphdata.csv")
analysis_sample <- read_csv("data/output/analysis_sample.csv")
analysis_sample <- read_dta("data/output/analysis_sample.dta")
# Replace missing values and merge
analysis_sample <- analysis_sample %>%
mutate(sat_math = if_else(mi_sat == 1, NA_real_, sat_math)) %>%
left_join(cohort_graphdata, by = "UNITID") # Adjust join type and by clause as necessary
analysis_sample$EXPOSURE_4YR
summary(analysis_sample$EXPOSURE_4YR)
head(analysis_sample)
head(analysis_sample$EXPOSURE_4YR))
summary(analysis_sample$EXPOSURE_4YR)
head(analysis_sample$EXPOSURE_4YR)
getwd()
setwd("~/Documents/R_folder/MSc/ME/ME-project")
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.prelim-DiD.R")
