xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
ylim(c(0,3)) +
labs(title="TWFE weights")
twfe_weights_plot
library(bacondecomp)
library(lfe)
df_bacon <- bacon(l_homicide ~ post,
data = castle, id_var = "state",
time_var = "year")
# Diff-in-diff estimate is the weighted average of
# individual 2x2 estimates
dd_estimate <- sum(df_bacon$estimate*df_bacon$weight)
# 2x2 Decomposition Plot
bacon_plot <- ggplot(data = df_bacon) +
geom_point(aes(x = weight, y = estimate,
color = type, shape = type), size = 2) +
xlab("Weight") +
ylab("2x2 DD Estimate") +
geom_hline(yintercept = dd_estimate, color = "red") +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.background = element_rect(
fill="white", linetype="solid"),
legend.justification=c(1,1),
legend.position=c(1,1)
)
bacon_plot
# create formula
bacon_dd_formula <- as.formula(
'l_homicide ~ post | year + sid | 0 | sid')
# Simple diff-in-diff regression
bacon_dd_reg <- felm(formula = bacon_dd_formula, data = castle)
summary(bacon_dd_reg)
# Note that the estimate from earlier equals the
# coefficient on post
dd_estimate
# comparing to twfe estimates
filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, enter_time, exit_time_date, wave1, wave2)
# Create a post-treatment indicator
df <- analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, enter_time, exit_time_date, wave1, wave2)
# Create a post-treatment indicator
df <- analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, wave2)
# Create a post-treatment indicator
df <- analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB)
# Create a post-treatment indicator
analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB)
# Create a post-treatment indicator
analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, EXPOSED)
# Create a post-treatment indicator
df <- df %>% mutate(postTreated = !is.na(EXPOSED) & AY_FALL > 2004)
# Create a post-treatment indicator
analysis_sample %<>% mutate(postTreated = !is.na(EXPOSED) & AY_FALL > 2004)
library(magittr)
library(magrittr)
# Create a post-treatment indicator
analysis_sample %<>% mutate(postTreated = !is.na(EXPOSED) & AY_FALL > 2004)
analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, EXPOSED, postTreated)
# Create a post-treatment indicator
analysis_sample %<>% mutate(postTreated = !is.na(EXPOSED) & AY_FALL >= 2004)
analysis_sample %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, EXPOSED, postTreated)
# Create a post-treatment indicator
df = analysis_sample %>% mutate(postTreated = !is.na(EXPOSED) & AY_FALL >= 2004)
df %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, EXPOSED, postTreated)
# Run static TWFE, with SEs clustered at the college level
twfe_static <- feols(k_rank ~ postTreated | UNITID + AY_FALL, data = df, cluster = "UNITID")
# Create a post-treatment indicator
df = analysis_sample %>% mutate(postTreated = !is.na(EXPOSED))
df %>% filter(FBName == "Harvard") %>% select(FBName, AY_FALL, DateJoinedFB, EXPOSED, postTreated)
# Run static TWFE, with SEs clustered at the college level
twfe_static <- feols(k_rank ~ postTreated | UNITID + AY_FALL, data = df, cluster = "UNITID")
summary(twfe_static)
rm(list=ls())
library(haven)
library(tidyverse)
library(fixest)
library(fastDummies)
library(lmtest)
library(magrittr)
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1 & late_adopter == 0)
analysis_sample$k_rank <- analysis_sample$k_rank * 100
#excluding a specific observation
analysis_sample <- filter(analysis_sample, UNITID != 184694)
# create + recode simplebarrons variable
analysis_sample$simplebarrons <- analysis_sample$barrons
analysis_sample$simplebarrons <- as.numeric(as.character(analysis_sample$simplebarrons))
analysis_sample$simplebarrons <- dplyr::recode(analysis_sample$simplebarrons,
`0` = 1, `1` = 1,
`2` = 2, `3` = 2,
`4` = 3,
`5` = 4,
`999` = 9)
# group data and generate identifiers
analysis_sample$simpletiershock <- as.integer(interaction(analysis_sample$simplebarrons, analysis_sample$AY_FALL, drop = TRUE))
analysis_sample <- fastDummies::dummy_cols(analysis_sample, select_columns = "simpletiershock")
analysis_sample$D <- ifelse(analysis_sample$EXPOSURE_4YR > 0, 1, 0)
identical_elements <- analysis_sample$D == analysis_sample$EXPOSED
identical_elements # basically same thing - few differences probably bc of samples (main / twfe?)
analysis_sample <- analysis_sample %>% mutate(t = case_when(
AY_FALL == 1998 ~ 1,
AY_FALL == 1999 ~ 2,
AY_FALL == 2000 ~ 3,
AY_FALL == 2001 ~ 4,
AY_FALL == 2002 ~ 5,
AY_FALL == 2003 ~ 6,
AY_FALL == 2004 ~ 7,
AY_FALL == 2005 ~ 8
))
analysis_sample$G <- 0
for (i in unique(analysis_sample$UNITID)){
analysis_sample$G[analysis_sample$UNITID == i] <- min(analysis_sample$t[analysis_sample$UNITID == i & analysis_sample$D == 1])
}
analysis_sample$R <- analysis_sample$t - analysis_sample$G + 1
analysis_sample <- dummy_cols(analysis_sample, select_columns = "R")
R <- grep("R_", names(analysis_sample)[300:374], value = T)
# Whats trending in diff-n-diff paper introduces these two estimators under the multiple
# treatment periods and differntial treatment times.
# The Static TWFE assumes there is no hetergeneity in treatment effects over time or across
# different units
# Dynamic TWFE assumes there is treatment heterogeneity over time (so different treatment effect
# if you got the treatment sooner rather than later) but no heterogeneity across units.
# static TWFE
M1 <- feols(k_rank ~ D | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M1)
library(bacondecomp)
bacon(k_rank ~ D,
data = analysis_sample,
id_var = "UNITID",
time_var = "AY_FALL"
)
summary(m1) #1 more ob
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.prelim-DiD.R")
source("~/Documents/R_folder/MSc/ME/ME-project/code/1.prelim-DiD.R")
source("~/Documents/R_folder/MSc/ME/ME-project/code/2-staggered.R")
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
rm(list=ls())
library(haven)
library(tidyverse)
library(fixest)
library(fastDummies)
library(lmtest)
library(magrittr)
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1 & late_adopter == 0)
analysis_sample$k_rank <- analysis_sample$k_rank * 100
#excluding a specific observation
analysis_sample <- filter(analysis_sample, UNITID != 184694)
# create + recode simplebarrons variable
analysis_sample$simplebarrons <- analysis_sample$barrons
analysis_sample$simplebarrons <- as.numeric(as.character(analysis_sample$simplebarrons))
analysis_sample$simplebarrons <- dplyr::recode(analysis_sample$simplebarrons,
`0` = 1, `1` = 1,
`2` = 2, `3` = 2,
`4` = 3,
`5` = 4,
`999` = 9)
# group data and generate identifiers
analysis_sample$simpletiershock <- as.integer(interaction(analysis_sample$simplebarrons, analysis_sample$AY_FALL, drop = TRUE))
analysis_sample <- fastDummies::dummy_cols(analysis_sample, select_columns = "simpletiershock")
analysis_sample$D <- ifelse(analysis_sample$EXPOSURE_4YR > 0, 1, 0)
identical_elements <- analysis_sample$D == analysis_sample$EXPOSED
identical_elements # basically same thing - few differences probably bc of samples (main / twfe?)
analysis_sample <- analysis_sample %>% mutate(t = case_when(
AY_FALL == 1998 ~ 1,
AY_FALL == 1999 ~ 2,
AY_FALL == 2000 ~ 3,
AY_FALL == 2001 ~ 4,
AY_FALL == 2002 ~ 5,
AY_FALL == 2003 ~ 6,
AY_FALL == 2004 ~ 7,
AY_FALL == 2005 ~ 8
))
analysis_sample$G <- 0
for (i in unique(analysis_sample$UNITID)){
analysis_sample$G[analysis_sample$UNITID == i] <- min(analysis_sample$t[analysis_sample$UNITID == i & analysis_sample$D == 1])
}
analysis_sample$R <- analysis_sample$t - analysis_sample$G + 1
analysis_sample <- dummy_cols(analysis_sample, select_columns = "R")
R <- grep("R_", names(analysis_sample)[300:374], value = T)
# static TWFE
M1 <- feols(k_rank ~ D | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M1)
# dynamic TWFE
M2 <- feols(k_rank ~ `R_-1` + `R_-2` + `R_1` + `R_2` + `R_3` + `R_4` + `R_5` +
`R_6` | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M2)
#' @param l a particular value of the treatment for which to compute weights
#' @param D an nx1 vector containing doses for all units
cont_twfe_weights <- function(l, D) {
wt <- ( ( mean(D[D>=l]) - mean(D) ) * mean(1*(D>=l)) ) / var(D)
wt
}
#' nonparametric estimates of att(d|d) and acrt(d|d)
#' @param dy the change in the outcome over time
#' @param dose the amount of the treatment
#' @return list(
#'            local_effects - data frame containing the dose and estimates of
#'              att(dose) and acrt(dose)
#'            att.overall - an estimate of the overall att
#'            acrt.overall - an estimate of the overall acrt
#'          )
cont_did <- function(dy, dose) {
# choose bandwidth
bw <- np::npregbw(formula=dy ~ dose,
regtype="ll",
bws=1.06,
bwscaling=TRUE,
bandwidth.compute=FALSE)
# estimate att and acrt nonparametrically
out <- np::npreg(bws=bw, gradients=TRUE, exdat=dose)
# order from smallest to largest dose and drop untreated
this_order <- order(dose)
dose <- dose[this_order]
dy <- dy[this_order]
att.d <- out$mean[this_order]
acrt.d <- out$grad[,1][this_order]
att.d <- att.d[dose>0]
acrt.d <- acrt.d[dose>0]
att.overall <- mean(att.d)
acrt.overall <- mean(acrt.d)
return(list(local_effects=data.frame(dose=dose[dose>0],
att.d=att.d,
acrt.d=acrt.d),
att.overall=att.overall,
acrt.overall=acrt.overall))
}
# plotting histogram
dose <- as.vector(analysis_sample$EXPOSURE_4YR)
dy <- as.vector(analysis_sample$k_rank)
p <- ggplot(data.frame(dose=dose), aes(x=dose)) +
geom_histogram()
p
# The histogram show that a non-trivial fraction of units are untreated whist there is no real
# pattern to the rest, bar the bunching at 4 years.
library(binscatteR)
# binscatter plot of the change in the outcome over time with respect to the dose
binnedout <- binscatter(data=analysis_sample, x="EXPOSURE_4YR", y="k_rank")
binnedout
twfe <- lm(dy ~ dose)
summary(twfe)$coefficients
cont_res <- cont_did(dy, dose)
cont_res$att.overall
cont_res$acrt.overall
plot_df <- cont_res$local_effects
colnames(plot_df) <- c("dose", "att", "acrt")
ggplot(plot_df, aes(x=dose, att)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
ggplot(plot_df, aes(x=dose, acrt)) +
geom_hline(yintercept=0, color="red", linetype="dashed") +
geom_line() +
theme_bw()
dL <- min(dose[dose>0])
dU <- max(dose)
# density of the dose
dose_grid <- seq(dL, dU, length.out=100)
frq_weights_plot <- ggplot(data.frame(dose=dose[dose>0]), aes(x=dose)) +
geom_density(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid)))+
ylab("Density weights") +
xlab("Dose") +
ylim(c(0,3)) +
labs(title="Density of dose")
frq_weights_plot
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D=dose)
plot_df <- cbind.data.frame(twfe_weights, dose_grid)
twfe_weights_plot <- ggplot(data=plot_df,
mapping=aes(x = dose_grid,
y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid),
max(dose_grid)))+
ylab("TWFE weights") +
xlab("Dose") +
geom_vline(xintercept = mean(dose),
colour="black",
linewidth = 0.5,
linetype = "dotted") +
ylim(c(0,3)) +
labs(title="TWFE weights")
twfe_weights_plot
devtools::install_github("bcallaway11/qte")
devtools::install_github("bcallaway11/pte")
devtools::install_github("bcallaway11/ife")
devtools::install_github("bcallaway11/BMisc")
install.packages("dplyr")
install.packages("dplyr")
#' @param l a particular value of the treatment for which to compute weights
#' @param D an nx1 vector containing doses for all units
cont_twfe_weights <- function(l, D) {
wt <- ( ( mean(D[D>=l]) - mean(D) ) * mean(1*(D>=l)) ) / var(D)
wt
}
#' nonparametric estimates of att(d|d) and acrt(d|d)
#' @param dy the change in the outcome over time
#' @param dose the amount of the treatment
#' @return list(
#'            local_effects - data frame containing the dose and estimates of
#'              att(dose) and acrt(dose)
#'            att.overall - an estimate of the overall att
#'            acrt.overall - an estimate of the overall acrt
#'          )
cont_did <- function(dy, dose) {
# choose bandwidth
bw <- np::npregbw(formula=dy ~ dose,
regtype="ll",
bws=1.06,
bwscaling=TRUE,
bandwidth.compute=FALSE)
# estimate att and acrt nonparametrically
out <- np::npreg(bws=bw, gradients=TRUE, exdat=dose)
# order from smallest to largest dose and drop untreated
this_order <- order(dose)
dose <- dose[this_order]
dy <- dy[this_order]
att.d <- out$mean[this_order]
acrt.d <- out$grad[,1][this_order]
att.d <- att.d[dose>0]
acrt.d <- acrt.d[dose>0]
att.overall <- mean(att.d)
acrt.overall <- mean(acrt.d)
return(list(local_effects=data.frame(dose=dose[dose>0],
att.d=att.d,
acrt.d=acrt.d),
att.overall=att.overall,
acrt.overall=acrt.overall))
}
# plotting histogram
dose <- as.vector(analysis_sample$EXPOSURE_4YR)
dy <- as.vector(analysis_sample$k_rank)
p <- ggplot(data.frame(dose=dose), aes(x=dose)) +
geom_histogram()
p
# The histogram show that a non-trivial fraction of units are untreated whist there is no real
# pattern to the rest, bar the bunching at 4 years.
library(binscatteR)
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
library(synthdid)
library(causalverse)
# syndid
library(tidyverse)
library(synthdid)
library(causalverse)
rm(list=ls())
df <- fixest::base_stagg |>
dplyr::mutate(treatvar = if_else(time_to_treatment >= 0, 1, 0)) |>
dplyr::mutate(treatvar = as.integer(if_else(year_treated > (5 + 2), 0, treatvar)))
fixest::base_stagg
df <- fixest::base_stagg
View(df)
rm(list=ls())
library(haven)
library(tidyverse)
library(fixest)
library(fastDummies)
library(lmtest)
library(magrittr)
analysis_sample <- read_dta("../original_study/labour-market/data/output/analysis_sample.dta") %>%
filter(twfe_sample == 1 & late_adopter == 0)
analysis_sample$k_rank <- analysis_sample$k_rank * 100
#excluding a specific observation
analysis_sample <- filter(analysis_sample, UNITID != 184694)
# create + recode simplebarrons variable
analysis_sample$simplebarrons <- analysis_sample$barrons
analysis_sample$simplebarrons <- as.numeric(as.character(analysis_sample$simplebarrons))
analysis_sample$simplebarrons <- dplyr::recode(analysis_sample$simplebarrons,
`0` = 1, `1` = 1,
`2` = 2, `3` = 2,
`4` = 3,
`5` = 4,
`999` = 9)
# group data and generate identifiers
analysis_sample$simpletiershock <- as.integer(interaction(analysis_sample$simplebarrons, analysis_sample$AY_FALL, drop = TRUE))
analysis_sample <- fastDummies::dummy_cols(analysis_sample, select_columns = "simpletiershock")
analysis_sample$D <- ifelse(analysis_sample$EXPOSURE_4YR > 0, 1, 0)
identical_elements <- analysis_sample$D == analysis_sample$EXPOSED
identical_elements # basically same thing - few differences probably bc of samples (main / twfe?)
analysis_sample <- analysis_sample %>% mutate(t = case_when(
AY_FALL == 1998 ~ 1,
AY_FALL == 1999 ~ 2,
AY_FALL == 2000 ~ 3,
AY_FALL == 2001 ~ 4,
AY_FALL == 2002 ~ 5,
AY_FALL == 2003 ~ 6,
AY_FALL == 2004 ~ 7,
AY_FALL == 2005 ~ 8
))
analysis_sample$G <- 0
for (i in unique(analysis_sample$UNITID)){
analysis_sample$G[analysis_sample$UNITID == i] <- min(analysis_sample$t[analysis_sample$UNITID == i & analysis_sample$D == 1])
}
analysis_sample$R <- analysis_sample$t - analysis_sample$G + 1
analysis_sample <- dummy_cols(analysis_sample, select_columns = "R")
R <- grep("R_", names(analysis_sample)[300:374], value = T)
# Whats trending in diff-n-diff paper introduces these two estimators under the multiple
# treatment periods and differntial treatment times.
# The Static TWFE assumes there is no hetergeneity in treatment effects over time or across
# different units
# Dynamic TWFE assumes there is treatment heterogeneity over time (so different treatment effect
# if you got the treatment sooner rather than later) but no heterogeneity across units.
# static TWFE
M1 <- feols(k_rank ~ D | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M1)
# dynamic TWFE
M2 <- feols(k_rank ~ `R_-1` + `R_-2` + `R_1` + `R_2` + `R_3` + `R_4` + `R_5` +
`R_6` | UNITID + simpletiershock, data = analysis_sample, vcov = "cluster")
print(M2)
df <- fixest::base_stagg |>
dplyr::mutate(treatvar = if_else(time_to_treatment >= 0, 1, 0)) |>
dplyr::mutate(treatvar = as.integer(if_else(year_treated > (5 + 2), 0, treatvar)))
View(df)
View(analysis_sample)
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- as.date(analysis_sample$DateJoinedFB, format = "%Y")
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- as_date(analysis_sample$DateJoinedFB, format = "%Y")
analysis_sample %>% select(year_treated)
analysis_sample %>% select(UNITID, AY_FALL, year_treated)
analysis_sample$DateJoinedFB
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- as_date(as_date(analysis_sample$DateJoinedFB), format = "%Y")
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- as.date(analysis_sample$DateJoinedFB, format = "%Y")
analysis_sample$DateJoinedFB
DateJoinedFB
analysis_sample$DateJoinedFB
as_date(analysis_sample$DateJoinedFB, format = "%Y")
head(analysis_sample$DateJoinedFB)
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, format = "%m/%d/%Y"), "%Y")
# continuous DiD ----------------------------------------------------------------
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, format = "%m/%d/%Y"), "%Y")
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y")
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y")
# To extract the year and create a new column for it
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, "%Y")
analysis_sample$year_treated
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- ifelse(is.na(analysis_sample$DateJoinedFB) ,as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y"), 3000)
analysis_sample$DateJoinedFB
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- ifelse(!is.na(analysis_sample$DateJoinedFB) ,as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y"), 3000)
analysis_sample$DateJoinedFB
# continuous DiD ----------------------------------------------------------------
analysis_sample$DateJoinedFB <- as.Date(analysis_sample$DateJoinedFB, format = "%m/%d/%Y")
# To extract the year and create a new column for it
analysis_sample$year_treated <- format(analysis_sample$DateJoinedFB, "%Y")
est <- causalverse::synthdid_est_ate(
data               = analysis_sample,
adoption_cohorts   = 5:7,
lags               = 2,
leads              = 2,
time_var           = "AY_FALL",
unit_id_var        = "UNITID",
treated_period_var = "year_treated",
treat_stat_var     = "EXPOSED",
outcome_var        = "k_rank"
)
est <- causalverse::synthdid_est_ate(
data               = analysis_sample,
lags               = 2,
leads              = 2,
time_var           = "AY_FALL",
unit_id_var        = "UNITID",
treated_period_var = "year_treated",
treat_stat_var     = "EXPOSED",
outcome_var        = "k_rank"
)
est <- causalverse::synthdid_est_ate(
data               = analysis_sample,
adoption_cohorts   = 1:5,
lags               = 2,
leads              = 2,
time_var           = "AY_FALL",
unit_id_var        = "UNITID",
treated_period_var = "year_treated",
treat_stat_var     = "EXPOSED",
outcome_var        = "k_rank"
)
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
source("~/Documents/R_folder/MSc/ME/ME-project/code/3-cont.R")
library(qte) # for change-in-changes
library(pte) # for lagged outcomes
library(ife) # for interactive fixed effects
library(BMisc)
library(dplyr)
head(analysis_sample)
## changes in changes
set.seed(1234)
cic_res <- cic2(yname="income",
tname="year",
idname="id",
gname="group",
data=analysis_sample,
cl=4, # inference uses bootstrap, so using 4 cores here for parallel computing
anticipation=1)
